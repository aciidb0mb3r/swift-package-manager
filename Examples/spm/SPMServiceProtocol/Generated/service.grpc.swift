//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate SPM_ServiceClient, then call methods of this protocol to make API calls.
public protocol SPM_ServiceClientProtocol {
  func resolve(_ request: SPM_ResolveRequest, callOptions: CallOptions?, handler: @escaping (SPM_RawLogEvent) -> Void) -> ServerStreamingCall<SPM_ResolveRequest, SPM_RawLogEvent>
  func build(_ request: SPM_BuildRequest, callOptions: CallOptions?, handler: @escaping (SPM_RawLogEvent) -> Void) -> ServerStreamingCall<SPM_BuildRequest, SPM_RawLogEvent>
}

public final class SPM_ServiceClient: GRPCClient, SPM_ServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the SPM.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Perform package resolution operation.
  ///
  /// - Parameters:
  ///   - request: Request to send to resolve.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func resolve(
    _ request: SPM_ResolveRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (SPM_RawLogEvent) -> Void
  ) -> ServerStreamingCall<SPM_ResolveRequest, SPM_RawLogEvent> {
    return self.makeServerStreamingCall(
      path: "/SPM.Service/resolve",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Perform build operation.
  ///
  /// - Parameters:
  ///   - request: Request to send to build.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func build(
    _ request: SPM_BuildRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (SPM_RawLogEvent) -> Void
  ) -> ServerStreamingCall<SPM_BuildRequest, SPM_RawLogEvent> {
    return self.makeServerStreamingCall(
      path: "/SPM.Service/build",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol SPM_ServiceProvider: CallHandlerProvider {
  /// Perform package resolution operation.
  func resolve(request: SPM_ResolveRequest, context: StreamingResponseCallContext<SPM_RawLogEvent>) -> EventLoopFuture<GRPCStatus>
  /// Perform build operation.
  func build(request: SPM_BuildRequest, context: StreamingResponseCallContext<SPM_RawLogEvent>) -> EventLoopFuture<GRPCStatus>
}

extension SPM_ServiceProvider {
  public var serviceName: String { return "SPM.Service" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "resolve":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.resolve(request: request, context: context)
        }
      }

    case "build":
      return ServerStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.build(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload`
extension SPM_BuildParameters: GRPCProtobufPayload {}
extension SPM_BuildRequest: GRPCProtobufPayload {}
extension SPM_ResolveRequest: GRPCProtobufPayload {}
extension SPM_RawLogEvent: GRPCProtobufPayload {}
